#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (ql:quickload '(:qlot) :silent t)
  )


(defpackage :ros.script.clails.3961085205.boot
  (:use :cl))
(in-package :ros.script.clails.3961085205.boot)

(defparameter CLAILS_CONF_DIR (uiop:getenv "CLAILS_CONF_DIR"))
(unless CLAILS_CONF_DIR
  (setf CLAILS_CONF_DIR (format NIL "~A/.clails/" (user-homedir-pathname))))

(progn
  (setf qlot/logger:*logger-message-stream* (make-broadcast-stream))
  (ensure-directories-exist CLAILS_CONF_DIR)
  (setf qlot:*project-root* CLAILS_CONF_DIR)
  (unless (probe-file (merge-pathnames "qlfile" CLAILS_CONF_DIR))
    (qlot:add "tamurashingo/cl-dbi-connection-pool")
    (qlot:add "tamurashingo/getcmd")

    (qlot:add "tamurashingo/clails"))

  (qlot:install)
  (push (format NIL "~A/.qlot/" CLAILS_CONF_DIR) ql:*local-project-directories*)
  (ql:quickload :clails :silent t))


(defpackage :ros.script.clails.3961085205
  (:use :cl))
(in-package :ros.script.clails.3961085205)

;(defun create-project (project-name &key (project-path (uiop/os:getcwd)) (database :sqlite3))
;  (clails/cmd:create-project project-name project-path database))

(defun load-project ()
  (push (uiop/os:getcwd) ql:*local-project-directories*)
  (load "clails.boot"))

(defun environment/show ()
  (load-project)
  (format t "environment:~A~%" clails/environment:*project-environment*))

(defun db/create ()
  (load-project)
  (clails/cmd:db/create))

(defun db/migrate/up (&optional version)
  (load-project)
  (load "db/package.lisp")
  (clails/cmd:db/migrate))

(defun db/migrate/down (&optional version)
  (format t "down~%"))

(defun db/status ()
  (load-project)
  (load "db/package.lisp")
  (clails/cmd:db/status))

(defun generate/model (model-name &key no-overwrite no-migration)
  (load-project)
  (clails/cmd:generate/model model-name :no-overwrite no-overwrite :no-migration no-migration))

(defun generate/migration (migration-name)
  (load-project)
  (clails/cmd:generate/migration migration-name))

(defun generate/view (view-name &key no-overwrite)
  (load-project)
  (clails/cmd:generate/view view-name :no-overwrite no-overwrite))

(defun generate/controller (controller-name &key no-overwrite)
  (load-project)
  (clails/cmd:generate/controller controller-name :no-overwrite no-overwrite))

(defun generate/scaffold (name &key no-overwrite)
  (load-project)
  (clails/cmd:generate/scaffold name :no-overwrite no-overwrite))

(defun server (&key (port "5000") (bind "127.0.0.1"))
  (load-project)
  (clails/cmd:server :port port :bind bind))

(defun stop ()
  (load-project)
  (clails/cmd:stop))

(defun help ()
  (format t "clails CMD [OPTIONS] [args...]~%"))


(defparameter *config*
  `(:commands ((:command "new"
                :function ,#'clails/cmd:create-project
                :options ((:short-option "p"
                           :long-option "path"
                           :keyword :project-path
                           :consume T)
                          (:short-option "d"
                           :long-option "database"
                           :keyword :database
                           :consume T
                           :converter ,#'(lambda (s)
                                           (intern (string-upcase s) :KEYWORD)))))
               (:command "environment"
                :function ,#'environment/show)
               (:command "db:create"
                :function ,#'db/create)
               (:command "db:migrate"
                :function ,#'db/migrate/up)
               (:command "db:migrate:up"
                :function ,#'db/migrate/up)
               (:command "db:migrate:down"
                :function ,#'db/migrate/down)
               (:command "db:status"
                :function ,#'db/status)
               (:command "generate:model"
                :function ,#'generate/model
                :options ((:long-option "no-overwrite"
                           :keyword :no-overwrite)
                          (:short-option "n"
                           :long-option "no-migration"
                           :keyword :no-migration)))
               (:command "generate:migration"
                :function ,#'generate/migration
                :options ((:long-option "no-overwrite"
                           :keyword :no-overwrite)))
               (:command "generate:view"
                :function ,#'generate/view
                :options ((:long-option "no-overwrite"
                           :keyword :no-overwrite)))
               (:command "generate:controller"
                :function ,#'generate/controller
                :options ((:long-option "no-overwrite"
                           :keyword :no-overwrite)))
               (:command "generate:scaffold"
                :function ,#'generate/scaffold
                :options ((:long-option "no-overwrite"
                           :keyword :no-overwrite)))
               (:command "server"
                :function ,#'server
                :options ((:short-option "p"
                           :long-option "port"
                           :keyword :port
                           :consume T)
                          (:short-option "b"
                           :long-option "bind"
                           :keyword :bind
                           :consume T))))))


(defun main (&rest argv)
  (let ((c (getcmd:getcmd argv *config* #'help)))
    (apply (getf c :function)
           (getf c :args))))

;;; vim: set ft=lisp lisp:
